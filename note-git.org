* config
** color
   for eshell, set color.ui always
   #+begin_src shell
     git config --global color.ui always
   #+end_src
* basic commands
  #+begin_src shell
    git init
    git clone <url>
    git status [-s]
    git diff [--cached]
    git add <file>...
    git commit [-a] [-m <message>]
    git push
    git pull
    git rm [--cached] <file>...
    git mv <file-from> <file-to>
    git log
  #+end_src
* remote
  #+begin_src shell
    git remote -v
    git remote add <remote-name> <url>
    git fetch <remote-name>
    git push <remote> <branch>
    git remote show <remote>
    git remote rename <remote> <new-remote>
    git remote remove <remote>
  #+end_src
* unstage
  #+begin_src shell
    git reset HEAD -- <file>...
  #+end_src
* tag
  #+begin_src shell
    git tag [-l | --list <tag-pattern>]
    git show <tag>
  #+end_src
** annotated tag
   #+begin_src shell
     git tag -a <tag> -m <message> [target-checksum]
   #+end_src
** lightweight tag
   #+begin_src shell
     git tag <tag> [target-checksum]
   #+end_src
** send tag to remote server
   #+begin_src shell
     git push <remote> <tag>
     git push <remote> --tags
   #+end_src
** checkout tag
   #+begin_src shell
     git checkout <tag> # will be detached HEAD after checkout tag
   #+end_src

   when detached HEAD state, new commit is not reach. then you must to create branch and do commit work.
   #+begin_src shell
     git checkout -b <branch> <tag>
   #+end_src
* git alias
  #+begin_src shell
    git config [--global] alias.<your-new-command> '<git-command> | !<external-command>'
  #+end_src
* branch
  #+begin_src shell
    git branch <branch>
    git log --decorate 		# show log with branch
    git checkout <branch>		# move to branch
  #+end_src

  HEAD is reference current branch

  show log by branch tree
  #+begin_src shell
    git log --oneline --decorate --graph --all
  #+end_src

  check out and new branch same time
  #+begin_src shell
    git branch <new-branch>
    git checkout <new-branch>
    # same next
    git checkout -b <new-branch>
  #+end_src
* merge
  #+begin_src shell
    git checkout <main-branch>
    git merge <other-branch> 	# merge from other-branch to current-branch(this time main-branch)
  #+end_src

  delete branch
  #+begin_src shell
    git branch -d <branch>
  #+end_src
* manage branch
  #+begin_src shell
    git branch [--merged | --no-merged]
  #+end_src
* remote branch
  #+begin_src shell
    git ls-remote
    git remote show
  #+end_src

  remote tracking branch name format
  =<remote>/<branch>=
  e.g.
  =origin/master=

  origin remote is default remote name when =git clone=
  master is default branch name when =git init=
  if you want to set remote name when clone do that
  #+begin_src shell
    git clone -o my-remote <git-url>
  #+end_src
  now my-remote is remote name

  #+begin_src shell
    git fetch origin		# get data from remote of name origin
  #+end_src
  and if fetch other remote, maked and setted =remote-tracking-branch=

  #+begin_src shell
    git push <remote> <local-branch>:<remote-branch> # this is need when local-branch name is not same remote-branch anem
  #+end_src

  for remote https url password
  #+begin_src shell
    git config --global credential.helper cache
  #+end_src

  merge from remote-tracking-branch that is not edit branch
  #+begin_src shell
    git merge <remote>/<branch>
  #+end_src

  or branching from remote-tracking-branch to new branch
  #+begin_src shell
    git checkout -b <new-bransh> <remote>/<branch>
    git checkout --track <remote>/<branch> # or same branch name used
  #+end_src

  when you want to tracking to remote branch from current branch
  #+begin_src shell
    git branch -u <remote>/<branch>
  #+end_src

  for show branch by tracking remote branch
  #+begin_src shell
    git branch -vv
  #+end_src

  when you want to check branch state by remote branch, first you must to get current info from remote
  #+begin_src shell
    git fetch --all; git branch -vv
  #+end_src
** pull
   #+begin_src shell
     git pull
   #+end_src

   same that
   #+begin_src shell
     git fetch; git merge
   #+end_src

   recomanted to use fetch and merge command each other than use pull command
*** remove remote branch
    #+begin_src shell
      git push <remote> --delete <branch>
    #+end_src
* rebase
  method combine one branch with other branch
  other method is merge

  #+begin_src shell
    git checkout <branch>
    git rebase <master-branch>
  #+end_src

  other rebase e.g.
  #+begin_src shell
    git rebase --onto <master> <from-branch> <to-branch> # rebase to master-branch by commits between from-branch to to-branch
    # and to fast forward
    git checkout <master>
    git merge <to-branch>
  #+end_src

  or other method not need checkout
  #+begin_src shell
    git rebase <base-branch> <topic-branch> # rebase from topic-branch to base-branch. same as checkout topic-branch and rebase to base-branch
    # and to do fast-forward
    git checkout <base-branch>
    git merge <topic-branch>
    # now you can remove topic-branch if not need that branch any more
    git branch -d <topic-branch>
  #+end_src

  =you must not to do rebase pushed commit to public remote.=

  possible rebase when pull
  #+begin_src shell
    git pull --rebase
  #+end_src
